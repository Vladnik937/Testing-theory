Задание №1
Темы:
* Что такое тестирование ПО
* Цели тестирования ПО
* Когда начинать и заканчивать тестирование ПО
* Принципы тестирования
* Что такое качество ПО
* Характеристики качества ПО и их атрибуты
* Quality assurance
* Quality control
* Tester
* Верификация
* Валидация
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Что такое тестирование ПО
Тестирование программного обеспечения — это процесс проверки и оценки программного продукта с целью обнаружения ошибок, багов, отклонений от требований и на соответствие ожидаемого и фактического результата.
Тестирование программного обеспечения — это систематический процесс, направленный на оценку работы программного продукта с целью выявления ошибок (дефектов), оценки его соответствия требованиям и повышения качества. Тестирование включает проверку того, что программное обеспечение (ПО) выполняет свои функции правильно, надёжно и эффективно.
Цели тестирования ПО
* Обнаружение дефектов — выявление ошибок в программном обеспечении до того, как оно поступит к конечным пользователям.
* Проверка соответствия требованиям — подтверждение того, что продукт удовлетворяет как функциональные, так и нефункциональные требования.
* Оценка качества — оценка параметров, таких как производительность, безопасность, юзабилити и надёжность.
* Снижение рисков — минимизация рисков, связанных с возможными сбоями или неисправностями программного обеспечения.
* Обеспечение доверия к продукту — повышение уверенности в том, что продукт может быть выпущен на рынок.
Когда начинать и заканчивать тестирование
Начинать тестирование следует как можно раньше, на этапе проектирования и разработки требований, чтобы выявить ошибки на ранних стадиях.
Заканчивать тестирование можно, когда:
* Достигнуты все цели тестирования.
* Все критичные баги устранены, а оставшиеся дефекты не оказывают значительного влияния на функциональность.
* Уровень рисков эксплуатации продукта приемлем для заказчика или пользователя.
* Бюджет и сроки тестирования исчерпаны.
Принципы тестирования
1. Тестирование показывает наличие дефектов, но не их отсутствие — тестирование может выявить ошибки, но не гарантирует, что их нет.
* Суть: Тестирование не может доказать, что программа не содержит ошибок. Оно может лишь показать наличие дефектов в системе. Даже если тесты не выявили багов, это не означает, что их нет.
* Пример: Вы провели тестирование и не обнаружили ошибок, но это не означает, что система работает идеально. Возможно, вы просто не проверили все сценарии или не учли определенные условия.


2. Исчерпывающее тестирование невозможно — невозможно протестировать все комбинации входных данных и условий.
* Суть: Проверить все возможные комбинации сценариев и условий практически невозможно. Поэтому тестировщики выбирают самые важные и приоритетные тесты для выполнения.
* Пример: В случае с веб-приложением количество комбинаций браузеров, операционных систем, разрешений экрана и других параметров огромно. Исчерпывающее тестирование всех этих комбинаций потребует слишком много времени и ресурсов.
3. Раннее тестирование — ошибки дешевле и легче устранять на ранних стадиях разработки.
* Суть: Чем раньше в жизненном цикле разработки продукта будет начато тестирование, тем дешевле и быстрее можно выявить и исправить ошибки. Выявленные на этапе планирования или проектирования ошибки исправить значительно проще, чем на финальных этапах.
* Пример: Ошибка в спецификации требований, выявленная в начале, исправляется намного быстрее и дешевле, чем ошибка, обнаруженная уже в готовом продукте на этапе тестирования перед выпуском.
4. Скопление дефектов — большинство дефектов концентрируется в небольшом числе модулей системы.
* Суть: Обычно большая часть дефектов сосредоточена в небольшом числе модулей или компонентов системы. Это явление носит название "кластеризация дефектов".
* Пример: В проекте может быть один проблемный модуль, в котором обнаруживаются 80% всех ошибок, хотя на остальные модули приходится всего 20% дефектов.
5. Парадокс пестицида — тесты, которые постоянно повторяются, теряют свою эффективность, так как перестают находить новые ошибки.
* Суть: Если повторять одни и те же тесты, со временем они станут менее эффективными и перестанут находить новые ошибки. Чтобы избежать этого, тесты необходимо регулярно обновлять и улучшать.
* Пример: Тестировщик многократно проверяет один и тот же сценарий, и все ошибки уже исправлены. Однако, если внести новые тест-кейсы или изменить сценарии тестирования, можно найти новые дефекты.
6. Тестирование зависит от контекста — методы и типы тестирования зависят от характера системы, которая тестируется.
* Суть: Методы тестирования зависят от типа проекта, контекста и требований. То, что подходит для одной системы, может быть совершенно неэффективным для другой.
* Пример: Тестирование мобильного приложения будет сильно отличаться от тестирования банковской системы. В одном случае важны производительность и работа с разными устройствами, а в другом — безопасность и точность вычислений.
7. Заблуждение об отсутствии ошибок — даже если тестирование не выявило ошибок, это не означает, что продукт удовлетворяет ожиданиям пользователя.
* Суть: Если программа не соответствует требованиям или не удовлетворяет потребностям пользователей, то даже полное отсутствие ошибок не сделает её успешной. Продукт должен не только работать корректно, но и решать задачи бизнеса.
* Пример: Программа работает без сбоев, но не удовлетворяет ключевым требованиям заказчика. В результате, несмотря на техническое совершенство, продукт может быть отвергнут пользователями.
Что такое качество ПО
Качество программного обеспечения — это степень соответствия продукта его функциональным и нефункциональным требованиям. Качество характеризует, насколько продукт удовлетворяет потребности пользователей, надёжен, удобен в использовании, безопасен, производителен и поддерживается в рабочем состоянии.
Качество программного обеспечения — это совокупность характеристик программного продукта, которые удовлетворяют ожидания и потребности пользователей, а также соответствуют установленным стандартам и требованиям. Это комплексное понятие, которое охватывает различные аспекты работы ПО: от функциональности и производительности до удобства использования и надёжности.
Основные характеристики качества ПО и их атрибуты
Существует несколько ключевых характеристик, которые описывают качество ПО. Эти характеристики основаны на международных стандартах, таких как **ISO/IEC 25010**. Вот основные из них:
1. Функциональность - Определяет, насколько программное обеспечение выполняет требуемые задачи.
* Корректность: Насколько верно и точно ПО выполняет функции, заданные в требованиях.
* Полнота: Соответствие программного обеспечения всем спецификациям и требованиям.
* Интероперабельность: Возможность взаимодействия системы с другими системами и программами.
* Безопасность: Способность ПО защищать данные от несанкционированного доступа и предотвращать различные угрозы.
2. Надёжность - Характеризует способность системы оставаться стабильной при работе в реальных условиях эксплуатации.
* Доступность: Время, в течение которого система остаётся доступной для пользователей.
* Восстанавливаемость: Способность системы восстанавливаться после сбоев или ошибок.
* Терпимость к ошибкам: Способность продолжать работать, несмотря на наличие некоторых дефектов.
3. Удобство использования (юзабилити) - Оценка того, насколько легко пользователям взаимодействовать с системой.
* Изучаемость: Легкость освоения и начальной работы с программным обеспечением.
* Управляемость: Легкость взаимодействия с системой в процессе её использования.
* Эстетика пользовательского интерфейса: Насколько интерфейс приятен и удобен для глаз.
* Доступность: Способность программы быть доступной для пользователей с ограниченными возможностями (например, с нарушениями зрения).
4. Производительность (эффективность) - Оценка использования ресурсов системой и её скорости работы.
* Время отклика: Время, за которое система выполняет команды пользователей.
* Использование ресурсов: Эффективность использования системных ресурсов (памяти, процессора, сети и т.д.).
* Масштабируемость: Способность системы справляться с увеличением нагрузки без ухудшения производительности.
5. Поддерживаемость (сопровождаемость) - Насколько легко ПО можно модифицировать и поддерживать в рабочем состоянии.
* Модифицируемость: Возможность вносить изменения в программный код, исправлять баги или добавлять новые функции.
* Тестируемость: Способность программного обеспечения быть протестированным на наличие ошибок.
* Анализируемость: Способность системы предоставлять информацию, необходимую для анализа и устранения проблем.
6. Переносимость (портативность) - Способность ПО работать на различных платформах и устройствах без значительных изменений.
* Адаптируемость: Насколько легко программу можно адаптировать к другим аппаратным и программным средам.
* Устанавливаемость: Лёгкость и удобство установки системы в различных средах.
* Заменяемость: Способность программы быть заменённой или обновлённой без значительных проблем.






















































Критерии оценки качества программного обеспечения
1. **Соответствие требованиям**: ПО должно удовлетворять как функциональные, так и нефункциональные требования, указанные в спецификации.
2. **Удовлетворение потребностей пользователя**: Продукт должен решать задачи пользователя и быть удобным в использовании.
3. **Надёжность и устойчивость**: ПО должно стабильно работать в реальных условиях и не допускать частых сбоев.
4. **Безопасность**: Система должна защищать данные и предотвращать несанкционированный доступ.
5. **Производительность**: ПО должно выполнять свои функции быстро и эффективно, не перегружая системные ресурсы.
 
### Как обеспечить высокое качество программного обеспечения?
1. **Точное определение требований**: Качественные требования — основа для создания качественного продукта. Если требования нечеткие или постоянно изменяются, это негативно скажется на качестве.
2. **Внедрение процессов контроля и обеспечения качества**: Важно использовать как **QA** (Quality Assurance), так и **QC** (Quality Control) подходы.
   - **QA** — предотвращение ошибок на ранних этапах разработки.
   - **QC** — проверка готового продукта для выявления дефектов.
3. **Раннее и регулярное тестирование**: Тестирование нужно проводить на всех этапах разработки, начиная с самых ранних, что позволяет вовремя выявлять и устранять ошибки.
4. **Инструменты автоматизации**: Использование автоматизированных тестов и инструментов для проверки производительности и безопасности помогает сократить время тестирования и повысить его эффективность.
5. **Документирование процессов**: Правильное ведение документации (тест-планы, чек-листы, отчеты о дефектах) помогает лучше контролировать качество продукта.
 
### Примеры плохого качества программного обеспечения
- **Производственные ошибки**: Если продукт слишком медленно обрабатывает запросы пользователей или его работа нарушается при увеличении нагрузки.
- **Юзабилити-проблемы**: Если пользователи не могут интуитивно понять, как работать с системой, и тратят много времени на обучение.
- **Безопасность**: Если система уязвима для хакерских атак, что может привести к утечке данных.
- **Ошибки и сбои**: Программа постоянно зависает или выдаёт неправильные результаты при вводе корректных данных.
### Заключение
 
Качество программного обеспечения — это не просто отсутствие ошибок. Оно охватывает широкий спектр характеристик, каждая из которых может существенно повлиять на успех продукта и удовлетворённость пользователей. Создание качественного ПО требует внимания на каждом этапе жизненного цикла разработки: от проектирования и написания кода до тестирования и поддержки продукта.
















Quality assurance
QA (Quality Assurance) — это систематический процесс, который охватывает все этапы разработки программного обеспечения. Цель QA — предотвратить возникновение дефектов в продукте, работая над улучшением процессов разработки. Это стратегический подход, направленный на обеспечение высокого качества продукта.
Основные задачи QA:
* Разработка и внедрение стандартов качества и процессов, которые помогают предотвратить ошибки.
* Оценка и улучшение процессов разработки и тестирования.
* Аудит и мониторинг процессов на предмет соответствия установленным стандартам.
QA — это проактивная деятельность. Основная цель QA — создание таких условий, при которых вероятность появления ошибок минимальна.
Пример:
QA-инженеры разрабатывают процесс тестирования, чтобы убедиться, что требования к продукту чётко сформулированы, а команды разработчиков и тестировщиков следуют установленным стандартам.
Основные роли в QA:
1. QA Manager (Менеджер по качеству)
   * Это стратегическая роль, отвечающая за создание и внедрение стандартов качества в организации.
   * Основные задачи:
      * Разработка и внедрение политики качества в компании.
      * Организация процесса QA на всех этапах жизненного цикла продукта.
      * Управление командой QA, мониторинг соблюдения стандартов и процессов.
      * Взаимодействие с другими отделами для улучшения процессов разработки.
      * Проведение аудитов и оценка результатов QA.
2. QA Engineer (Инженер по обеспечению качества)
   * Этот специалист занимается внедрением и мониторингом процессов, помогающих предотвратить появление дефектов.
   * Задачи:
      * Разработка и оптимизация процессов тестирования и разработки.
      * Анализ требований и участие в планировании проекта для предотвращения ошибок на стадии разработки.
      * Составление чек-листов и контроль их выполнения.
      * Обучение команды принципам обеспечения качества.
Quality control
QC (Quality Control) — это процесс, направленный на проверку готового продукта или его компонентов с целью выявления дефектов и несоответствий. QC сосредоточен на обнаружении ошибок в продукте и их устранении до того, как продукт будет выпущен на рынок. QC — это тактический подход, который реализуется в конце процесса разработки.
Основные задачи QC:
* Поиск и исправление ошибок в готовом продукте.
* Проведение различных видов тестирования для оценки функциональности и производительности продукта.
* Проверка продукта на соответствие требованиям и ожиданиям заказчика.
QC — это реактивная деятельность, так как она направлена на устранение ошибок после их появления.
Пример:
QC-инженеры выполняют тестирование новой версии приложения, чтобы убедиться, что все функциональные требования выполнены и система работает корректно.
Основные роли в QC:
1. QC Lead (Руководитель команды контроля качества)
   * QC-лид координирует работу тестировщиков и инженеров по контролю качества, контролирует выполнение задач по тестированию.
   * Основные задачи:
      * Планирование и распределение тестовых задач в команде.
      * Определение приоритетов тестирования и координация тестирования перед релизом.
      * Анализ результатов тестирования, подготовка отчетов по качеству.
      * Взаимодействие с менеджерами проекта, QA и разработчиками для исправления ошибок.
2. QC Engineer (Инженер по контролю качества)
   * Этот специалист отвечает за непосредственное тестирование продукта и выявление багов.
   * Задачи:
      * Проведение функционального, регрессионного, интеграционного и других видов тестирования.
      * Создание и выполнение тест-кейсов.
      * Работа с баг-трекинговыми системами (Jira, Bugzilla).
      * Анализ и документирование багов.


Tester
Тестировщик — это специалист, который непосредственно занимается проверкой программного обеспечения для выявления ошибок и несоответствий. Тестирование является частью процесса QC, но тестировщики могут участвовать и в обеспечении качества на уровне QA, работая над улучшением процессов тестирования.
Основные задачи тестировщика:
* Проведение тестов, направленных на проверку функциональности, производительности, безопасности и других аспектов продукта.
* Создание тест-кейсов и сценариев для различных случаев использования системы.
* Документирование найденных дефектов и отслеживание их исправления.
Тестировщик — это ключевой игрок в процессе контроля качества. Он фокусируется на проверке конкретных частей продукта.
Пример:
Тестировщик проверяет новую функцию в мобильном приложении, чтобы убедиться, что она работает так, как ожидалось, и сообщает о найденных ошибках команде разработчиков.
Различия между QA, QC и Tester
1. QA (Обеспечение качества) — это процесс, охватывающий все этапы разработки и направленный на улучшение процессов, чтобы предотвратить возникновение ошибок. Это стратегия, цель которой — улучшить процессы разработки.
2. QC (Контроль качества) — это процесс проверки уже готового продукта для выявления и исправления дефектов. QC направлен на проверку соответствия продукта требованиям и стандартам.
3. Тестировщик — это человек, который непосредственно выполняет тестирование продукта в рамках процесса QC, чтобы найти ошибки и несоответствия.
Как они взаимодействуют:
* QA помогает установить стандарты и процессы, которые нужно соблюдать, чтобы предотвратить ошибки. Это стратегический подход, который влияет на весь жизненный цикл разработки.
* QC включает в себя тестирование, но сосредоточен на конечной проверке продукта, чтобы убедиться, что все требования выполнены.
* Тестировщик работает в рамках QC, выполняя тесты и помогая обнаружить ошибки в продукте.


* QA Manager (или QA Engineer) создает и улучшает процессы разработки и тестирования, чтобы предотвратить появление ошибок. Он устанавливает стандарты, которыми руководствуется вся команда.
* QC Lead отвечает за организацию тестирования и контроль качества продукта. Он координирует работу тестировщиков, устанавливает приоритеты для тестов и помогает в решении проблем, связанных с качеством.
* Тестировщики выполняют тестирование по сценариям, описанным в тест-кейсах, документируют найденные дефекты и работают над их воспроизведением и исправлением.


Пример взаимодействия:
В компании разработан новый процесс разработки ПО. QA разрабатывает стандарты и процедуры тестирования, чтобы минимизировать ошибки. На последнем этапе разработки команда QC проверяет продукт и запускает серию тестов, чтобы убедиться, что продукт соответствует стандартам качества. Тестировщик в этой команде выполняет тесты, документирует результаты и сообщает о найденных ошибках, чтобы разработчики могли их исправить.
* QA Manager разрабатывает стандарты для тестирования нового продукта и утверждает чек-листы.
* QC Lead распределяет задачи между тестировщиками и контролирует выполнение тестов перед релизом.
* Тестировщики проводят функциональные и регрессионные тесты, проверяют продукт на наличие ошибок, отправляют баги разработчикам и следят за их исправлением.






















Верификация
Верификация — это процесс, который обеспечивает соответствие системы или её компонентов определённым спецификациям и требованиям. Основная цель верификации — убедиться в том, что продукт был построен правильно, согласно заранее определённым требованиям и стандартам.
Цели верификации:
* Убедиться в правильности выполнения проектных решений: Проверить, что система реализована в соответствии с проектной документацией.
* Обнаружить ошибки на ранних этапах: Выявить несоответствия и ошибки до начала этапов интеграционного и системного тестирования.
Методы верификации:
1. Анализ требований:
   * Цель: Проверка требований на полноту, согласованность, непротиворечивость и реализуемость.
   * Методы: Ревью требований, создание требований на основе историй пользователей, использование методик проверки требований.
   * Пример: Анализ документации по требованиям для оценки их ясности и полноты.
2. Ревью и инспекция:
   * Цель: Проверка документов, кода или других артефактов разработки на соответствие требованиям.
   * Методы: Ревью (неформальное обсуждение), инспекция (формальный процесс с использованием чек-листов).
   * Пример: Проведение код-ревью, где команда проверяет код на соответствие стандартам и спецификациям.
3. Статический анализ:
   * Цель: Выявление потенциальных проблем в коде без его выполнения.
   * Методы: Использование инструментов статического анализа (например, SonarQube, ESLint).
   * Пример: Анализ кода на наличие уязвимостей, ошибок и стиля.
4. Моделирование:
   * Цель: Проверка моделей проектирования и архитектуры на соответствие требованиям.
   * Методы: Создание и анализ диаграмм, моделирование процессов и систем.
   * Пример: Анализ архитектурных диаграмм для проверки соответствия проектным требованиям.
5. Тестирование на этапе разработки:
   * Цель: Проверка, что компоненты или модули работают согласно спецификациям.
   * Методы: Юнит-тестирование, тестирование модулей.
   * Пример: Выполнение юнит-тестов для проверки правильности функций и методов.
Валидация
Валидация — это процесс проверки того, что система или её компоненты соответствуют требованиям и ожиданиям конечных пользователей. Основная цель валидации — убедиться в том, что продукт решает поставленные задачи и удовлетворяет потребности пользователей.
Цели валидации:
* Проверить соответствие продукта ожиданиям пользователей: Убедиться, что продукт удовлетворяет потребности конечных пользователей и выполняет свои функции.
* Убедиться в правильности реализации требований: Проверить, что конечный продукт соответствует бизнес-требованиям и требованиям функциональности.
Методы валидации:
1. Функциональное тестирование:
   * Цель: Проверка функциональности системы на соответствие бизнес-требованиям.
   * Методы: Тестирование функций системы в различных сценариях.
   * Пример: Проверка, что кнопка "Сохранить" на веб-странице действительно сохраняет данные.
2. Приемочное тестирование (Acceptance Testing):
   * Цель: Проверка, что продукт соответствует критериям приемки заказчика и требованиям бизнеса.
   * Методы: Проведение тестов с участием заказчиков и пользователей, оценка соответствия бизнес-требованиям.
   * Пример: Пользовательское тестирование, где заказчик проверяет, что продукт выполняет все необходимые функции.
3. Пользовательское тестирование (User Testing):
   * Цель: Оценка удобства и эффективности интерфейса и функциональности для конечных пользователей.
   * Методы: Наблюдение за пользователями, сбор обратной связи, тестирование в реальных условиях.
   * Пример: Проведение тестов с реальными пользователями, чтобы узнать, как они взаимодействуют с интерфейсом приложения.
4. Интеграционное тестирование:
   * Цель: Проверка взаимодействия между компонентами системы.
   * Методы: Тестирование взаимодействия модулей, системное тестирование.
   * Пример: Проверка, что модуль регистрации пользователей взаимодействует с модулем входа в систему.
5. Системное тестирование:
   * Цель: Полное тестирование системы как целого, проверка её интеграции и взаимодействия всех компонентов.
   * Методы: Проверка всей системы в условиях, приближённых к реальному использованию.
   * Пример: Тестирование полной версии веб-приложения с различными типами пользователей и сценариями использования.


Примеры верификации и валидации на разных этапах разработки
Этап проектирования:
* Верификация: Проверка архитектурных и проектных документов на соответствие требованиям.
* Валидация: Проверка концептуальных моделей и прототипов с потенциальными пользователями для оценки соответствия их ожиданиям.
Этап разработки:
* Верификация: Выполнение юнит-тестов, код-ревью и статический анализ кода.
* Валидация: Проведение функциональных тестов, проверка работы функций в реальных сценариях.
Этап тестирования:
* Верификация: Проверка исправлений и новых функций на соответствие требованиям.
* Валидация: Проведение приемочного тестирования и пользовательского тестирования для проверки соответствия конечным требованиям.
Этап выпуска:
* Верификация: Убедиться, что все исправления ошибок соответствуют спецификациям.
* Валидация: Проведение финального тестирования с участием конечных пользователей для подтверждения, что продукт готов к выпуску.